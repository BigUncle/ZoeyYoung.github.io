Title: [基础] 给Python初学者的一些技巧
Date: 2013-07-17
Tags: Python
Slug: python-shortcuts-for-the-python-beginner
Author: Zoey Young
Summary: 给Python初学者的一些技巧

在 Python 2.7.5 和 Python 3.3.2 中进行测试, 更正部分不一致

英文原文: [Python Shortcuts for the Python Beginner —— Max Burstein](http://maxburstein.com/blog/python-shortcuts-for-the-python-beginner/), 编译: 伯乐在线 – 刘志军

译文链接：http://blog.jobbole.com/32748/

以下是我近些年收集的一些Python实用技巧和工具，希望能对你有所帮助。

#### 交换变量 Swapping Variables

    :::python
    x = 6
    y = 5

    x, y = y, x

    print(x)
    >>> 5
    print(y)
    >>> 6

#### 行内 if 语句 Inline if Statement

    :::python
    print("Hello" if True else "World")
    >>> Hello

#### 连接 Concatenations

下面的最后一种方式在绑定两个不同类型的对象时显得很cool.

    :::python
    nfc = ["Packers", "49ers"]
    afc = ["Ravens", "Patriots"]
    print nfc + afc
    >>> ['Packers', '49ers', 'Ravens', 'Patriots']

    print str(1) + " world"
    >>> 1 world

    print '1' + " world" # 这里在Python3中使用单引号会出错
    >>> 1 world

    print 1, "world"
    >>> 1 world
    print nfc, 1
    >>> ['Packers', '49ers'] 1
    print(nfc, 1) # 注意这里与Python3不同
    >>>  (['Packers', '49ers'], 1)

Python3中略有不同:

    :::python
    nfc = ["Packers", "49ers"]
    afc = ["Ravens", "Patriots"]
    print(nfc + afc)
    >>> ['Packers', '49ers', 'Ravens', 'Patriots']

    print(str(1) + " world")
    >>> 1 world

    print("1" + " world")
    >>> 1 world

    print(1, "world")
    >>> 1 world
    print(nfc, 1)
    >>> ['Packers', '49ers'] 1

#### 数字技巧 Number Tricks

    :::python
    # 除后向下取整 Floor Division (rounds down)
    print(5.0//2)
    >>> 2.0
    # 2的5次方
    print 2**5
    >> 32

注意浮点数的除法

    :::python
    print .3/.1
    >>> 2.9999999999999996  # Python2 中输出 3.0
    print(.3//.1)
    >>> 2.0

#### 数值比较 Numerical Comparison

这是我见过诸多语言中很少有的如此棒的简便法

    :::python
    x = 2
    if 3 > x > 1:
        print(x)
    >>> 2
    if 1 < x > 0:
        print(x)
    >>> 2

#### 同时迭代两个列表  Iterate Through Two Lists at the Same Time

    :::python
    nfc = ["Packers", "49ers"]
    afc = ["Ravens", "Patriots"]
    for teama, teamb in zip(nfc, afc):
        print(teama + " vs. " + teamb)
    >>> Packers vs. Ravens
    >>> 49ers vs. Patriots

#### 带索引的列表迭代  Iterate Through List With an Index

    :::python
    teams = ["Packers", "49ers", "Ravens", "Patriots"]
    for index, team in enumerate(teams):
        print(index, team)
    >>> 0 Packers
    >>> 1 49ers
    >>> 2 Ravens
    >>> 3 Patriots

#### 列表推导 List Comprehension

使用列表推导我们可以将下面代码:

    :::python
    numbers = [1,2,3,4,5,6]
    even = []
    for number in numbers:
        if number%2 == 0:
            even.append(number)

转变成:

    :::python
    numbers = [1,2,3,4,5,6]
    even = [number for number in numbers if number%2 == 0]

是不是很牛呢, 哈哈.

#### 字典推导 Dictionary Comprehension

和列表推导类似, 字典可以做同样的工作：

    :::python
    teams = ["Packers", "49ers", "Ravens", "Patriots"]
    print({key: value for value, key in enumerate(teams)})
    >>> {'49ers': 1, 'Ravens': 2, 'Patriots': 3, 'Packers': 0}
    # Python3 >>> {'Packers': 0, 'Patriots': 3, 'Ravens': 2, '49ers': 1}

#### 初始化列表的值 Initialize List Values

    :::python
    items = [0]*3
    print(items)
    >>> [0,0,0]

The `[0]*3` is nice, but you have to be careful with it. You can hit a big snag with references For instance:

    :::python
    a = [[]]*3 # [[], [], []]
    a[0].append(0) # [[0], [0], [0]]

#### 列表转换为字符串 Converting a List to a String

    :::python
    teams = ["Packers", "49ers", "Ravens", "Patriots"]
    print(", ".join(teams))
    >>> Packers, 49ers, Ravens, Patriots

#### 从字典中获取元素 Get Item From Dictionary

我承认`try/except`代码并不雅致, 不过这里有一种简单方法, 尝试在字典中查找key, 如果没有找到对应的value将用第二个参数设为其变量值.

    :::python
    data = {'user': 1, 'name': 'Max', 'three': 4}
    try:
       is_admin = data['admin']
    except KeyError:
       is_admin = False

你可以这样做:

    :::python
    data = {'user': 1, 'name': 'Max', 'three': 4}
    is_admin = data.get('admin', False)

#### 获取列表的子集 Taking a Subset of a List

有时，你只需要列表中的部分元素，这里是一些获取列表子集的方法。

    :::python
    x = [1,2,3,4,5,6]
    #前3个
    print(x[:3])
    >>> [1,2,3]
    #中间4个
    print(x[1:5])
    >>> [2,3,4,5]
    #最后3个
    print(x[-3:])
    >>> [4,5,6]
    #奇数项
    print(x[::2])
    >>> [1,3,5]
    #偶数项
    print(x[1::2])
    >>> [2,4,6]
    #Reverse List
    print(x[::-1])
    >>> [6,5,4,3,2,1]

#### 60个字符解决FizzBuzz问题 FizzBuzz in 60 Characters

前段时间 Jeff Atwood 推广了一个简单的编程练习叫[FizzBuzz](http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html), 问题引用如下：

> 写一个程序, 打印数字1到100, 3的倍数打印"Fizz"来替换这个数, 5的倍数打印"Buzz", 对于既是3的倍数又是5的倍数的数字打印"FizzBuzz".

这里是一个简短的, 有意思的方法解决这个问题:

    :::python
    for x in range(101):print("fizz"[x%3*4::]+"buzz"[x%5*4::] or x)

#### 集合 Collections

除了python内置的数据类型外, 在[collection](http://docs.python.org/2/library/collections.html)模块同样还包括一些特别的用例. 在有些场合Counter非常实用. 如果你参加过在这一年的[Facebook HackerCup](https://www.facebook.com/hackercup), 你甚至也能找到他的实用之处.

    :::python
    from collections import Counter
    print Counter("hello")
    >>> Counter({'l': 2, 'h': 1, 'e': 1, 'o': 1})

#### 迭代工具 Itertools

和collections库一样, python还有一个库叫[itertools](http://docs.python.org/2/library/itertools.html), 对某些问题真能高效地解决. 其中一个用例是查找所有组合. 它能告诉你在一个组中元素的所有不同的组合方式.

    :::python
    from itertools import combinations
    teams = ["Packers", "49ers", "Ravens", "Patriots"]
    for game in combinations(teams, 2):
        print(game)
    >>> ('Packers', '49ers')
    >>> ('Packers', 'Ravens')
    >>> ('Packers', 'Patriots')
    >>> ('49ers', 'Ravens')
    >>> ('49ers', 'Patriots')
    >>> ('Ravens', 'Patriots')

#### False == True (Python2)

比起实用技术来说这是一个很有趣的事. 在python中, True和False是全局变量. 因此:

    False = True
    if False:
       print "Hello"
    else:
       print "World"
    >>> Hello

In python 2 True and False are basically just global variables. In Python 3 they are keywords.

如果你还有任何很酷的奇技淫巧, 可以在下面留言, 感谢阅读.
