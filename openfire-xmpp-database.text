Title: [记录] Openfire集成现有系统数据库用户
Date: 2012-10-31
Tags: Openfire,数据库,XMPP,MySQL
Slug: openfire-xmpp-database
Author: Zoey Young
Summary: Openfire集成现有系统数据库用户

基于Openfire 3.7.1

### 参考文档：

官方文档

[Custom Database Integration Guide](http://www.igniterealtime.org/builds/openfire/docs/latest/documentation/db-integration-guide.html)

——参考该文档介绍需要配置的参数, 在**conf/openfire.xml**中编辑属性, 实际为在管理控制台或数据库中添加系统属性

### 背景

假设已存在MySQL数据库**office**, 且数据库中有3张表**users(用户表)**、**groups(分组表)**和**groupusers(用户所属分组表)**

### 目标

使用**office**数据库中的**users**、**groups**、**groupusers**表替代**Openfire**中的**ofuser**、**ofgroup**、**ofgroupuser**三个表, 从而整合现有系统用户

**users**表包含的属性（对应于Openfire原数据库中的**ofuser**表）：

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
  </tr>
  <tr>
   <td>uid</td><td>用于登录，假如uid为admin，则jid为admin@domain</a></td>
  </tr>
  <tr><td>name</td><td>用户名</td></tr>
  <tr><td>pwd</td><td>密码</td></tr>
  <tr><td>email</td><td>电子邮件</td>
  </tr>
 </tbody>
</table>

    :::sql
    CREATE TABLE `users` (
      `uid` varchar(64) NOT NULL,
      `pwd` varchar(32) DEFAULT NULL,
      `name` varchar(100) DEFAULT NULL,
      `email` varchar(100) DEFAULT NULL,
      PRIMARY KEY (`uid`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8

**groups**表包含的属性（对应于Openfire原数据库中的**ofgroup**表）：

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
  </tr>
  <tr><td>groupName</td><td>组名</td></tr>
  <tr><td>description</td><td>描述</td></tr>
 </tbody>
</table>

    :::sql
    CREATE TABLE `groups` (
      `groupName` varchar(50) NOT NULL,
      `description` varchar(255) DEFAULT NULL,
      PRIMARY KEY (`groupName`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8

**groupusers**表包含的属性（对应于Openfire原数据库中的**ofgroupuser**表）：

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
  </tr>
  <tr><td>groupName</td><td>对应于groups表的groupName</td></tr>
  <tr><td>uid</td><td>对应于user表的uid</td></tr>
  <tr><td>admin</td><td>是否是管理员, 1是, 0否</td></tr>
 </tbody>
</table>

    :::sql
    CREATE TABLE `groupusers` (
      `groupName` varchar(50) NOT NULL,
      `uid` varchar(100) NOT NULL,
      `admin` tinyint(4) NOT NULL,
      PRIMARY KEY (`groupName`,`uid`,`admin`)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8

**注：表中属性名不一定要一样, 关键是“说明”部分, 此处参考Openfire原有数据库中的表创建**

进入**Openfire管理控制台-》服务器-》服务器管理器-》系统属性**, 默认系统属性：

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
   <td><strong>属性值</strong></td>
  </tr>
  <tr>
   <td>httpbind.enabled</td>
   <td><br></td>
   <td>true</td>
  </tr>
  <tr>
   <td>passwordKey</td>
   <td><br></td>
   <td><i>hidden</i></td>
  </tr>
  <tr>
   <td>provider.admin.className</td>
   <td><br></td>
   <td>org.jivesoftware.openfire.admin.DefaultAdminProvider</td>
  </tr>
  <tr>
   <td><strong>provider.auth.className</strong></td>
   <td><strong>验证</strong></td>
   <td><strong>org.jivesoftware.openfire.auth.DefaultAuthProvider</strong></td>
  </tr>
  <tr>
   <td><strong>provider.group.className</strong></td>
   <td><strong>组相关</strong></td>
   <td><strong>org.jivesoftware.openfire.group.DefaultGroupProvider</strong></td>
  </tr>
  <tr>
   <td>provider.lockout.className</td>
   <td><br></td>
   <td>org.jivesoftware.openfire.lockout.DefaultLockOutProvider</td>
  </tr>
  <tr>
   <td><strong>provider.securityAudit.className</strong></td>
   <td><strong>用户相关</strong></td>
   <td><strong>org.jivesoftware.openfire.security.DefaultSecurityAuditProvider</strong></td>
  </tr>
  <tr>
   <td>provider.user.className</td>
   <td><br></td>
   <td>org.jivesoftware.openfire.user.DefaultUserProvider</td>
  </tr>
  <tr>
   <td>provider.vcard.className</td>
   <td><br></td>
   <td>org.jivesoftware.openfire.vcard.DefaultVCardProvider</td>
  </tr>
  <tr>
   <td>update.lastCheck</td>
   <td><br></td>
   <td>1351559310961</td>
  </tr>
  <tr>
   <td>xmpp.auth.anonymous</td>
   <td><br></td>
   <td>true</td>
  </tr>
  <tr>
   <td><strong>xmpp.domain</strong></td>
   <td><strong>域名，服务器IP</strong> </td>
   <td><span style="color:#E53333;"><strong>192.168.0.46</strong></span></td>
  </tr>
  <tr>
   <td>xmpp.httpbind.scriptSyntax.enabled</td>
   <td><br></td>
   <td>true</td>
  </tr>
  <tr>
   <td>xmpp.session.conflict-limit</td>
   <td><br></td>
   <td>0</td>
  </tr>
  <tr>
   <td>xmpp.socket.ssl.active</td>
   <td><br></td>
   <td>true</td>
  </tr>
 </tbody>
</table>

首先**修改**三个属性(openfire提供了支持JDBC相关的Provider, 可以从其它的数据源获取用户/组数据)：

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>属性值</strong></td>
  </tr>
  <tr>
   <td>provider.auth.className</td>
   <td>org.jivesoftware.openfire.auth.<span style="color:#E53333;"><strong>JDBC</strong></span>AuthProvider</td>
  </tr>
  <tr>
   <td>provider.group.className</td>
   <td> org.jivesoftware.openfire.group.<span style="color:#E53333;"><strong>JDBC</strong></span>GroupProvider</td>
  </tr>
  <tr>
   <td>provider.user.className</td>
   <td> org.jivesoftware.openfire.user.<span style="color:#E53333;"><strong>JDBC</strong></span>UserProvider</td>
  </tr>
 </tbody>
</table>

接着配置**数据源**（添加系统属性, 这里使用的是mysql数据库）：

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong> </td>
   <td><strong>属性值</strong></td>
  </tr>
  <tr>
   <td>jdbcProvider.driver</td>
   <td>数据源驱动</td>
   <td>com.mysql.jdbc.Driver</td>
  </tr>
  <tr>
   <td>jdbcProvider.connectionString</td>
   <td>连接字符串，需要集成的数据库地址</td>
   <td> jdbc:mysql://<span style="color:#E53333;">localhost</span>:3306/<span style="color:#E53333;">office</span>?user=<span style="color:#E53333;">root</span>&amp;password=<span style="color:#E53333;">123456</span></td>
  </tr>
 </tbody>
</table>

这里的配置可[参考](http://www.igniterealtime.org/builds/openfire/docs/latest/documentation/database.html)

其中, 相应数据库的driver必须放在Openfire安装目录的"lib/"文件夹中（默认安装Openfire后就有了）。

对每一个JDBC Provider需要**添加**相关系统属性

#### JDBCAuthProvider

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
   <td><strong>输入值</strong></td>
   <td><strong>输出列</strong></td>
   <td><strong>属性值</strong></td>
  </tr>
  <tr>
   <td><span>jdbcAuthProvider.passwordSQL</span></td>
   <td>获取用户密码的SQL</td>
   <td>登录名</td>
   <td>密码</td>
   <td>select <span style="color:#E53333;">pwd </span>from <span style="color:#E53333;">users </span>where <span style="color:#E53333;">uid</span>=?</td>
  </tr>
  <tr>
   <td>jdbcAuthProvider.passwordType</td>
   <td>密码类型</td>
   <td><br></td>
   <td><br></td>
   <td><span style="color:#E53333;">plain</span>(文本) | md5 | sha1 | sha256 |sha512, 如果密码加密不为前面几种, 就需要自己提供一个AuthProvide, 如果没有设置, 默认为plain</td>
  </tr>
 </tbody>
</table>

#### JDBCUserProvider

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
   <td><strong>输入值</strong></td>
   <td><strong>输出列</strong></td>
   <td><strong>属性值</strong></td>
  </tr>
  <tr>
   <td>jdbcUserProvider.allUsersSQL</td>
   <td>获取所有用户</td>
   <td><br/></td>
   <td>用户的uid</td>
   <td>select <span style="color:#E53333;">uid </span>from <span style="color:#E53333;">user</span><span style="color:#E53333;">s</span></td>
  </tr>
  <tr>
   <td>jdbcUserProvider.loadUserSQL</td>
   <td>获取用户信息</td>
   <td>用户uid</td>
   <td>用户名,email</td>
   <td>select <span style="color:#E53333;">name</span>,<span style="color:#E53333;">email </span>from <span style="color:#E53333;">users </span>where <span style="color:#E53333;">uid</span>=?</td>
  </tr>
  <tr>
   <td>jdbcUserProvider.userCountSQL</td>
   <td>获取用户数量</td>
   <td><br/></td>
   <td>用户数量</td>
   <td>select count(*) from <span style="color:#E53333;">users</span></td>
  </tr>
  <tr>
   <td>jdbcUserProvider.searchSQL</td>
   <td><span style="color:#E53333;"><strong>!!这边略有疑问!!</strong></span></td>
   <td><br></td>
   <td><br></td>
   <td>select <span style="color:#E53333;">uid </span>from <span style="color:#E53333;">users </span>where</td>
  </tr>
  <tr>
   <td>jdbcUserProvider.usernameField</td>
   <td>指定用户登录名的列名</td>
   <td><br></td>
   <td><br></td>
   <td><span style="color:#E53333;">uid</span></td>
  </tr>
  <tr>
   <td>jdbcUserProvider.nameField</td>
   <td>指定用户名称的列名</td>
   <td><br></td>
   <td><br></td>
   <td><span style="color:#E53333;">name</span></td>
  </tr>
  <tr>
   <td>jdbcUserProvider.emailField</td>
   <td>指定用户email的列名</td>
   <td><br></td>
   <td><br></td>
   <td><span style="color:#E53333;">email</span></td>
  </tr>
 </tbody>
</table>

#### JDBCGroupProvider

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
   <td><strong>输入值</strong></td>
   <td><strong>输出列</strong></td>
   <td><strong>属性值</strong></td>
  </tr>
  <tr>
   <td>jdbcGroupProvider.allGroupsSQL</td>
   <td>获取所有组的SQL</td>
   <td><br></td>
   <td>组名</td>
   <td>select <span style="color:#E53333;">groupName </span>from <span style="color:#E53333;">groups</span></td>
  </tr>
  <tr>
   <td>jdbcGroupProvider.descriptionSQL</td>
   <td>获取组描述</td>
   <td>组名</td>
   <td>组描述</td>
   <td>select <span style="color:#E53333;">description </span>from <span style="color:#E53333;">groups </span>where <span style="color:#E53333;">groupName</span>=?</td>
  </tr>
  <tr>
   <td>jdbcGroupProvider.groupCountSQL</td>
   <td>获取组的数量</td>
   <td><br></td>
   <td>组的数量</td>
   <td>select count(*) from <span style="color:#E53333;">groups</span></td>
  </tr>
  <tr>
   <td>jdbcGroupProvider.loadAdminsSQL</td>
   <td>获取组的管理员</td>
   <td>组名</td>
   <td>组管理员</td>
   <td>select <span style="color:#E53333;">uid </span>from <span style="color:#E53333;">groupusers </span>where <span style="color:#E53333;">groupName</span>=? and <span style="color:#E53333;">admin=1</span></td>
  </tr>
  <tr>
   <td>jdbcGroupProvider.loadMembersSQL</td>
   <td>获取组的成员</td>
   <td>组名</td>
   <td>组成员uid</td>
   <td>select <span style="color:#E53333;">uid </span>from <span style="color:#E53333;">groupusers </span>where <span style="color:#E53333;">groupName</span>=? and <span style="color:#E53333;">admin=0</span></td>
  </tr>
  <tr>
   <td>jdbcGroupProvider.userGroupsSQL</td>
   <td>获取成员的组</td>
   <td>成员uid</td>
   <td>成员所属组名</td>
   <td>select <span style="color:#E53333;">groupName </span>from <span style="color:#E53333;">groupusers </span>where <span style="color:#E53333;">uid</span>=? </td>
  </tr>
 </tbody>
</table>

注意：其中获取组的管理员和组的成员中的判断要根据相应系统修改, 我这边假设admin值为1时是管理员, 值为0时是成员

最后, 配置新的**管理员用户**（应该在**users**表中添加一个用户作为管理员）

<table class="table">
 <tbody>
  <tr>
   <td><strong>属性名</strong></td>
   <td><strong>说明</strong></td>
   <td><strong>属性值</strong></td>
  </tr>
  <tr>
   <td>admin.authorizedJIDs</td>
   <td>指定新数据源中的管理员用户, 注意是是完整JID(user@域名)</td>
   <td><span style="color:red">admin@192.168.0.46</span></td>
  </tr>
 </tbody>
</table>

注：官方文档写的配置admin.authorizedUsernames, 但是配置后似乎不起效果

**注：表中红色字体部分为需要根据具体数据库进行修改的部分.**

配置好后, 重启Openfire。

使用**admin.authorizedJIDs**中的用户名登录Openfire管理控制台(**admin.authorizedJIDs**配置为**admin@192.168.0.46**, 则用户名为**admin**).

如果配置成功, 进入**Openfire管理控制台-》用户/组**就可以看到你数据源中的用户/组信息了。

注: 在修改添加系统属性的过程中, 若无法登录Openfire管理控制台, 可直接修改Openfire数据库中的**ofproperty**表.

### 懒惰的程序猿——使用SQL语句修改

    :::sql
    ;
    ;//-----------------------------------------------------------------------------------------------------------
    UPDATE `openfire`.`ofProperty` SET propValue='org.jivesoftware.openfire.auth.JDBCAuthProvider' WHERE name='provider.auth.className';
    UPDATE `openfire`.`ofProperty` SET propValue='org.jivesoftware.openfire.group.JDBCGroupProvider' WHERE name='provider.group.className';
    UPDATE `openfire`.`ofProperty` SET propValue='org.jivesoftware.openfire.user.JDBCUserProvider' WHERE name='provider.user.className';

    INSERT INTO `openfire`.`ofProperty` VALUES
     ('jdbcProvider.driver', 'com.mysql.jdbc.Driver'),
     ('jdbcProvider.connectionString', 'jdbc:mysql://localhost:3306/office?user=root&password=123456'),
     ('admin.authorizedJIDs', 'admin@localhost,admin@192.168.0.46'),
     ('jdbcAuthProvider.passwordSQL', 'SELECT pwd FROM users WHERE uid=?'),
     ('jdbcAuthProvider.passwordType', 'plain'),
     ('jdbcUserProvider.allUsersSQL', 'SELECT uid FROM users'),
     ('jdbcUserProvider.loadUserSQL', 'SELECT name,email FROM users WHERE uid=?'),
     ('jdbcUserProvider.userCountSQL', 'SELECT COUNT(*) FROM users'),
     ('jdbcUserProvider.searchSQL', 'SELECT uid FROM users WHERE'),
     ('jdbcUserProvider.usernameField', 'uid'),
     ('jdbcUserProvider.nameField', 'name'),
     ('jdbcUserProvider.emailField', 'email');
     ('jdbcGroupProvider.allGroupsSQL', 'SELECT groupName FROM groups'),
     ('jdbcGroupProvider.descriptionSQL', 'SELECT description FROM groups WHERE groupName=?'),
     ('jdbcGroupProvider.groupCountSQL', 'SELECT COUNT(*) FROM groups'),
     ('jdbcGroupProvider.loadAdminsSQL', 'SELECT uid FROM groupusers WHERE groupName=? AND admin=1'),
     ('jdbcGroupProvider.loadMembersSQL', 'SELECT uid FROM groupusers WHERE groupName=? AND admin=0'),
     ('jdbcGroupProvider.userGroupsSQL', 'SELECT groupName from groupusers WHERE uid=?');
    ;//-----------------------------------------------------------------------------------------------------------
