<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OK Computer</title><link>http://zoeyyoung.github.io/</link><description>It's better to burn out &lt;br/&gt; than to fade away.</description><atom:link href="http://zoeyyoung.github.io/feeds/du-shu.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 02 Oct 2013 00:00:00 +0800</lastBuildDate><item><title>[笔记] 《编写可读代码的艺术》</title><link>http://zoeyyoung.github.io/the-art-of-readable-code.html</link><description>&lt;p&gt;&lt;a href="http://book.douban.com/subject/10797189/"&gt;《编写可读代码的艺术》&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;本书旨在帮助你把代码写得更好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序员的日常工作的大部分时间都花在一些"基本"的事情上, 像是给变量命名、写循环以及在函数级别解决问题. 并且这其中很大一部分是阅读和编辑已有的代码.【毕竟很少情况下是独立开发一个系统, 二次开发的情况应该比较多】&lt;/p&gt;
&lt;h3&gt;第1章 代码应当易于理解&lt;/h3&gt;
&lt;h4&gt;是什么让代码变得"更好"&lt;/h4&gt;
&lt;h4&gt;可读性基本定理&lt;/h4&gt;
&lt;p&gt;代码的写法应当使别人理解它所需的时间最小化【那个"别人"可能就是6个月后的自己...其实可能不到1周就忘得差不多了...】&lt;/p&gt;
&lt;h4&gt;总是越小越好吗&lt;/h4&gt;
&lt;p&gt;尽管减少代码行数是一个好目标, 但把理解代码所需的时间最小化是一个更好的目标【添加注释有助于理解代码】&lt;/p&gt;
&lt;h4&gt;理解代码所需的时间是否与其他目标有冲突  —— 不会&lt;/h4&gt;
&lt;p&gt;可读性基本定理总是先于本书中任何其他条例或原则.&lt;/p&gt;
&lt;h4&gt;最难的部分&lt;/h4&gt;
&lt;p&gt;要经常想其他人是否会觉得你的代码容易理解, 需要额外的时间&lt;/p&gt;
&lt;h2&gt;第一部分 表面层次的改进&lt;/h2&gt;
&lt;p&gt;(命名、注释以及审美 —— 可以用于代码库每一行的小提示)&lt;/p&gt;
&lt;p&gt;选择好的名字、写好的注释以及把代码整洁地写成更好的格式&lt;/p&gt;
&lt;h3&gt;第2章 把信息装到名字里(读者仅通过读到名字就可以获得大量信息)&lt;/h3&gt;
&lt;p&gt;把名字当做一条小小的注释, 可以承载很多信息&lt;/p&gt;
&lt;h4&gt;选择专业的词&lt;/h4&gt;
&lt;p&gt;例如, "get"这个词就非常不专业【不能了解是从哪"get"】, 更专业的名字可以是"fetch"或"download", 根据上下文决定&lt;/p&gt;
&lt;p&gt;"size"很难让人理解到底是什么的"size"【确实, 经常不理解】&lt;/p&gt;
&lt;p&gt;术语上区分它的职能、&lt;strong&gt;找到更有表现力的词&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单词  | 更多选择
send  | deliver、dispatch、announce、distribute、route
find  | search、extract、locate、recover
start | launch、create、begin、open
make  | create、set up、build、generate、compose、add、new&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;清晰和精确比装可爱好&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;避免像tmp和retval("我是一个返回值")这样空泛的名字&lt;/h4&gt;
&lt;p&gt;(或者说要知道什么时候使用它)&lt;/p&gt;
&lt;p&gt;好的名字应当描述变量的目的或者它所承载的值&lt;/p&gt;
&lt;p&gt;建议:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;retval这个名字没有包含很多信息. 用一个描述该变量的值的名字来代替它.&lt;/li&gt;
&lt;li&gt;tmp这个名字只应用于短期存在且临时性为其主要存在因素的变量.&lt;/li&gt;
&lt;li&gt;循环迭代器: 索引的第一个字母应该与数据的第一个字符匹配【这是个好建议, 不单纯使用i, j, k】&lt;/li&gt;
&lt;li&gt;对于空泛名字的裁定: 如果你需要使用像tmp、it或者retval这样空泛的名字, 那么你要有个好的理由&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;用具体的名字代替抽象的名字&lt;/h4&gt;
&lt;p&gt;在给变量、函数或者其他元素命名时, 要把它描述的更具体而不是更抽象&lt;/p&gt;
&lt;h4&gt;为名字附带更多信息&lt;/h4&gt;
&lt;p&gt;(使用前缀或后缀)&lt;/p&gt;
&lt;p&gt;给变量名带上重要的细节 —— 例如, 在值为毫秒的变量后面加上&lt;code&gt;_ms&lt;/code&gt;, 或者在还需要转义的, 未处理的变量前面加上&lt;code&gt;raw_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果关于一个变量有什么重要事情要读者必需知道, 那么是值得把额外的"词"添加到名字中的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;带单位的值&lt;/strong&gt;【带上单位就不用去查说明到底用的是什么单位了, 尤其是时间, 经常搞不清是使用秒还是毫秒】&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;delay_secs&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;size_mb&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;max_kbps&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;degrees_cw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;附加其他重要属性&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;plaintext_password&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;纯文本&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;格式密码&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;需要加密&lt;/span&gt;
&lt;span class="n"&gt;comment&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;unescaped_comment&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;html_utf8&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;data_urlenc&lt;/span&gt;        &lt;span class="err"&gt;以&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;url方式编码&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;的输入数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;名字应该有多长&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;为作用域大的名字采用更长的名字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在小的作用域里可以使用短的名字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;输入长名字————不再是个问题(编辑器的"单词补全"功能)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首字母缩略词和缩写&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用项目所特有的缩写词非常糟糕.&lt;/p&gt;
&lt;p&gt;经验原则是: 团队的新成员是否能理解这个名字的含义? 如果能, 那可能就没有问题.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;丢掉没用的词&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ConvertToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;DoServeLoop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ServeLoop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;利用名字的格式来传递含义&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;有目的地使用大小写、下划线&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考《Google开源项目格式规范》&lt;/p&gt;
&lt;p&gt;驼峰类名、下划线方法名、常量驼峰加kConstant前缀、宏是全大写下划线分词、构造函数首字母大写、jQuery对象前加$&lt;/p&gt;
&lt;p&gt;HTML/CSS中id和class的命名: 用下划线来分开ID中的单词, 用连字符来分开class中的单词.【之前一直纠结于用哪个...因为项目中有的这样用有的那样用...很多人不在乎格式搞得我很纠结啊...】&lt;/p&gt;
&lt;p&gt;团队中应该使用统一的规范!!!&lt;/p&gt;
&lt;h3&gt;第3章 不会误解的名字&lt;/h3&gt;
&lt;p&gt;要多问自己几遍:"这个名字会被别人解读成其他的含义吗?" —— 主动寻找"误解点"&lt;/p&gt;
&lt;p&gt;最好的名字是不会误解的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子: Filter()&lt;/strong&gt; —— 二义性词, 不知道其含义是"挑出"还是"减掉""&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：Clip(text, length)&lt;/strong&gt; —— 二义性词, 可能是从尾部删除, 也可能时裁掉最大长度为length的一段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;max_length&lt;/code&gt;也有很多种解读: 字节数、字符数、字数...如果要指"字符数", 可写成&lt;code&gt;max_chars&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐用&lt;code&gt;min&lt;/code&gt;和&lt;code&gt;max&lt;/code&gt;来表示(包含)极限&lt;/strong&gt;【这里还是有点问题, 到底包不包含...书上的例子看起来是不包含】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐用&lt;code&gt;first&lt;/code&gt;和&lt;code&gt;last&lt;/code&gt;来表示包含的范围&lt;/strong&gt;【last明显是包含的.】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐用&lt;code&gt;begin&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;来表示包含/排除范围&lt;/strong&gt;【这对最常用, end在C++标准库中是不包含】&lt;/p&gt;
&lt;h4&gt;给布尔值命名&lt;/h4&gt;
&lt;p&gt;当为布尔变量或者返回布尔值的函数选择名字时, 要确保返回&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;的意义很明确.&lt;/p&gt;
&lt;p&gt;通常来讲, 加上像&lt;code&gt;is&lt;/code&gt;、&lt;code&gt;has&lt;/code&gt;、&lt;code&gt;can&lt;/code&gt;或&lt;code&gt;should&lt;/code&gt;这样的词, 可以把布尔值变得更明确.&lt;/p&gt;
&lt;p&gt;避免使用反义的词. 如&lt;code&gt;disable_ssl&lt;/code&gt;, 应该用&lt;code&gt;use_ssl&lt;/code&gt;更易读.&lt;/p&gt;
&lt;h4&gt;与使用者的期望匹配&lt;/h4&gt;
&lt;p&gt;有些名字之所以会让人误解是因为用户对它们的含义有先入为主的印象, 就算你的本意并非如此. 在这种情况下, 最好放弃这个名字而改用一个不会让人误解的名字.&lt;/p&gt;
&lt;p&gt;例子: get*() 通常被当做"轻量级访问器", 不应该写需要太大代价的代码.&lt;/p&gt;
&lt;p&gt;用户会期望&lt;code&gt;get()&lt;/code&gt;或者&lt;code&gt;size()&lt;/code&gt;是轻量的方法.&lt;/p&gt;
&lt;h4&gt;例子: 如何权衡多个备选名字&lt;/h4&gt;
&lt;p&gt;【应该考虑经验用法, 就是一般这个词是怎么用的】&lt;/p&gt;
&lt;p&gt;分析每个备选名字, 考虑各种让人误解的可能性.&lt;/p&gt;
&lt;h3&gt;第4章 审美&lt;/h3&gt;
&lt;p&gt;让代码变得更易读有三条原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用一致的布局, 让读者很快就习惯这种风格.&lt;/li&gt;
&lt;li&gt;让相似的代码看上去相似.&lt;/li&gt;
&lt;li&gt;把相关的代码行分组, 形成代码块.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么审美这么重要&lt;/strong&gt; —— 让人愉悦的代码更容易阅读&lt;/p&gt;
&lt;h4&gt;重新安排换行带来保持一致和紧凑&lt;/h4&gt;
&lt;p&gt;如果多个代码块做相似的事情, 尝试让它们有同样的剪影.&lt;/p&gt;
&lt;h4&gt;用方法来整理不规则的东西&lt;/h4&gt;
&lt;p&gt;使代码"看上去漂亮"通常会带来不限于表面层次的改进, 它可能会帮你把代码的结构做的更好&lt;/p&gt;
&lt;h4&gt;在需要时使用列对齐&lt;/h4&gt;
&lt;p&gt;【这个虽然可使易读, 但是如果使用编辑器的格式化工具, 一般不能保持.】&lt;/p&gt;
&lt;h4&gt;选一个有意义的顺序， 始终一致地使用它&lt;/h4&gt;
&lt;p&gt;有一大堆get参数要获取, 我们对代码中每个获取的顺序有一些想法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让变量的顺序与对应的HTML表单中&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;字段的顺序相匹配.&lt;/li&gt;
&lt;li&gt;从"最重要"到"最不重要"排序.&lt;/li&gt;
&lt;li&gt;按字母顺序排序.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;把声明按块组织起来&lt;/h4&gt;
&lt;h4&gt;把代码分成"段落"【使用空行】&lt;/h4&gt;
&lt;h4&gt;个人风格与一致性&lt;/h4&gt;
&lt;p&gt;一致的风格比"正确"的风格更重要.&lt;/p&gt;
&lt;h3&gt;第5章 该写什么样的注释&lt;/h3&gt;
&lt;p&gt;注释的目的是尽量帮助读者了解得和作者一样多&lt;/p&gt;
&lt;h4&gt;什么不需要注释&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;不要为那些从代码本身就能快速推断的事实写注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要为了注释而注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要给不好的名字加注释 —— 应该把名字改好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个好的名字比一个好的注释更重要, 因为在任何用到这个函数的地方都能看得到它.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好代码 &amp;gt; 坏代码 + 好注释&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;记录你的思想&lt;/h4&gt;
&lt;p&gt;写代码时有过重要的想法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加入"导演评论"&lt;/strong&gt;【我喜欢】&lt;/p&gt;
&lt;p&gt;对于为什么代码写成这样而不是那样的内在理由("指导性批注")&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为代码中的瑕疵写注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;标记  | 通常的意义
TODO: | 我还没有处理的事情
FIXME:| 已知的无法运行的代码
HACK: | 对一个问题不得不采用的比较粗糙的解决方案
XXX:  | 危险! 这里有重要的问题&lt;/p&gt;
&lt;p&gt;你应该可以随时把代码将来应该如何改动的想法用注释记录下来. 这种注释给读者带来对代码质量和当前状态的宝贵见解, 甚至可能会给他们指出如何改进代码的方向.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给常量加注释&lt;/strong&gt; —— 【通常很有用. 为什么要定这个值...可不可以修改一类的】&lt;/p&gt;
&lt;h4&gt;站在读者的角度&lt;/h4&gt;
&lt;p&gt;想象你的代码对于外人来讲看起来是什么样子的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;公布可能的陷阱&lt;/strong&gt;【未雨绸缪, 预料到人们使用你的代码时可能会遇到的问题, 防止误用】&lt;/p&gt;
&lt;p&gt;可能会发生的意料之外的行为.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;"全局观"注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;思想下面的场景: 有新人刚刚加入你的团队, 她坐在你旁边, 而你需要让她熟悉代码库.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结性注释&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以做任何能帮助读者更容易理解代码的事. 这可能也会包含对于"做什么"、"怎么做"或者"为什么"的注释(或者同时注释这三个方面).&lt;/p&gt;
&lt;h4&gt;最后的思考 —— 克服"作者心理阻滞"&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;不管你心里想什么, 先把它写下来.&lt;/li&gt;
&lt;li&gt;读一下这段注释, 看看有没有什么地方可以改进.&lt;/li&gt;
&lt;li&gt;不断改进.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;第6章 写出言简意赅的注释&lt;/h3&gt;
&lt;p&gt;注释应当有很高的信息/空间率&lt;/p&gt;
&lt;h4&gt;让注释保持紧凑&lt;/h4&gt;
&lt;h4&gt;避免使用不明确的代词&lt;/h4&gt;
&lt;p&gt;当像"it"和"this"这样的代词可能指代多个事物时, 避免使用它们.&lt;/p&gt;
&lt;h4&gt;润色粗糙的句子&lt;/h4&gt;
&lt;h4&gt;精确的描述函数的行为&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Return the number of lines in this file&lt;/code&gt;和&lt;code&gt;Count how many newline bytes('\n') are in the file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用输入/输出例子来说明特别的情况&lt;/p&gt;
&lt;p&gt;例子要精心挑选, 可以说明复杂的情况.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Example: ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;声明代码的意图&lt;/h4&gt;
&lt;p&gt;高层次意图, 而非明显的细节.&lt;/p&gt;
&lt;h4&gt;"具名函数参数"的注释&lt;/h4&gt;
&lt;p&gt;用嵌入的注释来解释难以理解的函数参数&lt;/p&gt;
&lt;p&gt;默认参数 &lt;code&gt;Connetc(timeout = 10, user_encryption = false)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;做不到, 用&lt;code&gt;Connet(/* timeout_ms= */ 10, /* use_encryption = */ false)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;采用信息含量高的词&lt;/h4&gt;
&lt;p&gt;如果你感觉到一段注释太长了, 那么可以看看是不是可以用一个典型的编程场景来描述它&lt;/p&gt;
&lt;h2&gt;第二部分 简化循环和逻辑&lt;/h2&gt;
&lt;p&gt;在程序中定义循环、逻辑和变量, 从而使得代码更容易理解.&lt;/p&gt;
&lt;p&gt;试着最小化代码中的“思维包袱”&lt;/p&gt;
&lt;h3&gt;第7章 把控制流变的易读&lt;/h3&gt;
&lt;p&gt;把条件、循环以及其他对控制流的改变做得越“自然”越好。运用一种方式使读者不用停下来重读你的代码&lt;/p&gt;
&lt;p&gt;条件语句中参考的顺序
比较的左侧比较的右侧“被问询的”表达式，它更倾向于不断变化的用来做比较的的表达式，它的值更倾向于常量
if/else语句块的顺序
. 首先处理正逻辑而不是负逻辑的情况。例如，用if(debug)而不是if(!debug)。. 先处理掉简单的情况。这种方式可能还会使if和else在屏幕之内都可见. 先处理有趣的或者是可疑的情况&lt;/p&gt;
&lt;p&gt;?:条件表达式（又名“三目表达式”）
相对于追求最小化代码行数，一个更好的度量方法是最小化人们理解它所需的时间。&lt;/p&gt;
&lt;p&gt;默认情况下使用if/else。三目运算符?:只有在最简单的情况下使用&lt;/p&gt;
&lt;p&gt;避免do/while循环
我的经验是，do语句是错误和困惑的来源……我倾向于把条件放在“前面我能看到的地方”。其结果是，我倾向避免使用do语句。&lt;/p&gt;
&lt;p&gt;从函数中提前返回
臭名昭著的goto
应该避免使用goto&lt;/p&gt;
&lt;p&gt;最小化嵌套
嵌套很深的代码很难以理解&lt;/p&gt;
&lt;p&gt;当你对代码做改动时，从全新的角度审视它，把它作为一个整体来看待&lt;/p&gt;
&lt;p&gt;通过提早返回来减少嵌套&lt;/p&gt;
&lt;p&gt;你能理解执行的流程吗？
不要让代码中使用“线程”、“信号量”、“异常”、“函数指针和匿名函数”、“虚方法”过多让实现流程变的高级难懂。&lt;/p&gt;
&lt;h3&gt;第8章 拆分超长的表达式&lt;/h3&gt;
&lt;p&gt;把你的超长表达式拆分成更容易理解的小块&lt;/p&gt;
&lt;p&gt;用做解释的变量
临时中间变量&lt;/p&gt;
&lt;p&gt;总结变量
使用德摩根定理
分别取反，转换与/或&lt;/p&gt;
&lt;p&gt;滥用短路逻辑
要小心“智能”的小代码————它们往往以后会让别人读起来感到困惑。&lt;/p&gt;
&lt;p&gt;例子：与复杂的逻辑战斗
struct Range{    int begin;    int end;    //For example,[0,5) overlaps with [3,8)    bool OverlapsWith(Range other);}
相反比较&lt;/p&gt;
&lt;p&gt;bool Range::OverlapsWith(Range other){    if(other.end &amp;lt;= begin) return false;    if(other.begin &amp;gt;= end) return false;    return true;}
拆分巨大的语句
提取公用部分放入函数作为总结变量&lt;/p&gt;
&lt;p&gt;另一个简化表达式的创意方法
定义宏&lt;/p&gt;
&lt;h3&gt;第9章 变量与可读性&lt;/h3&gt;
&lt;p&gt;变量越多，就越难全部跟踪它们的动向&lt;/p&gt;
&lt;p&gt;变量的作用域越大，就更需要 跟踪它的动向越久&lt;/p&gt;
&lt;p&gt;变量改变得越频繁，就越难以跟踪它的当前值&lt;/p&gt;
&lt;p&gt;减少变量
没有价值的临时变量&lt;/p&gt;
&lt;p&gt;减少中间结果&lt;/p&gt;
&lt;p&gt;减少控制流变量&lt;/p&gt;
&lt;p&gt;缩小变量的作用域
让你的变量对尽量少的代码行可见。&lt;/p&gt;
&lt;p&gt;只写一次的变量更好
操作一个变量的地方越多，越难确定它的当前值。&lt;/p&gt;
&lt;p&gt;最后的例子&lt;/p&gt;
&lt;h2&gt;第三部分 重新组织代码&lt;/h2&gt;
&lt;p&gt;在更高层次上组织大的代码块以及在功能层次上解决问题的方法&lt;/p&gt;
&lt;p&gt;函数级别对代码做的更大的改动&lt;/p&gt;
&lt;h3&gt;第10章 抽取不相关的子问题&lt;/h3&gt;
&lt;p&gt;看看某个函数或者代码块，问问自己：这段代码高层次的目标是什么？&lt;/p&gt;
&lt;p&gt;对于每一行代码，问一下：它是直接为了目标而工作吗？这段代码高层次的目标是什么呢？&lt;/p&gt;
&lt;p&gt;如果足够的函数在解决不相关的子问题，抽取代码到独立的函数中。&lt;/p&gt;
&lt;p&gt;把一般代码和项目专有的代码分开&lt;/p&gt;
&lt;p&gt;介绍性的例子：findClosestLocation()
纯工具代码
其他多用途代码
子代码自称一体后改进它变得更容易&lt;/p&gt;
&lt;p&gt;创建大量通用代码
通用代码很好，因为“它完全地从项目的其他部分中解耦出来”&lt;/p&gt;
&lt;p&gt;项目专有的功能
简化已有接口
你永远都不要安于使用不理想的接口&lt;/p&gt;
&lt;p&gt;按需重塑接口
过犹不及
别分的太细，多个小函数对可读性不利&lt;/p&gt;
&lt;h3&gt;第11章 一次只做一件事&lt;/h3&gt;
&lt;p&gt;应把代码组织得一次制作一件事情。&lt;/p&gt;
&lt;p&gt;任务可以很小
投票的例子&lt;/p&gt;
&lt;p&gt;从对象中抽取值
更大型的例子&lt;/p&gt;
&lt;h3&gt;第12章 把想法变成代码&lt;/h3&gt;
&lt;p&gt;如果你不能把一件事情解释给你祖母听的话说明你还没有真正理解它。&lt;/p&gt;
&lt;p&gt;清楚地描述逻辑
用自然语言描述逻辑&lt;/p&gt;
&lt;p&gt;了解函数库是有帮助的
编写精炼代码的一部分工作是了解你的库提供了什么。&lt;/p&gt;
&lt;p&gt;把这个方法应用于更大的问题
自然语言描述逻辑、适当递归调用自身&lt;/p&gt;
&lt;h3&gt;第13章 少些代码&lt;/h3&gt;
&lt;p&gt;最好读的代码就是没有代码&lt;/p&gt;
&lt;p&gt;别费神实现那个功能————你不会需要它
质疑和拆分你的需求
保持小代码库
让你的代码库越小，越轻量级越好&lt;/p&gt;
&lt;p&gt;删除没用的代码&lt;/p&gt;
&lt;p&gt;熟悉你周边的库
每隔一段时间，花15分钟阅读标准库中的所有函数/模块/类型的名字&lt;/p&gt;
&lt;p&gt;成熟的库中，每行代码都代表大量的设计、调试、重写、文档、优化和测试。&lt;/p&gt;
&lt;p&gt;例子：使用Unix工具而非编写代码
通过以下方法避免编写新代码：&lt;/p&gt;
&lt;p&gt;. 从项目中消除不必要的功能，不要过度设计。&lt;/p&gt;
&lt;p&gt;. 重新考虑需求，解决版本最简单的问题，只要能完成工作就行。&lt;/p&gt;
&lt;p&gt;. 经常性地通读标准库的整个API，保持对它们的熟悉程度。&lt;/p&gt;
&lt;h2&gt;第四部分 精选话题&lt;/h2&gt;
&lt;p&gt;把"易于理解"的思想应用于测试以及大数据结构代码的例子&lt;/p&gt;
&lt;h3&gt;第14章 测试与可读性&lt;/h3&gt;
&lt;p&gt;使测试易于阅读和维护
测试应当具有可读性，以便其他程序员可以舒服地改变或者增加测试&lt;/p&gt;
&lt;p&gt;这段测试什么地方不对
使这个测试更可读
对使用者隐去不重要的细节，以便更重要的细节会更突出&lt;/p&gt;
&lt;p&gt;创建最小的测试声明
大多数测试的基本内容都能精炼成“对于这样的输入/输出情形，期望有这样的行为/输出”&lt;/p&gt;
&lt;p&gt;实现定制的“微语言”
让错误消息具有可读性
了解显示错误的库&lt;/p&gt;
&lt;p&gt;手工打造错误消息
错误消息应当越有帮助越好&lt;/p&gt;
&lt;p&gt;选择好的测试输入
基本原则是，你应当选择一组最简单的输入，它能完整地使用被测代码&lt;/p&gt;
&lt;p&gt;又简单又能完成工作的测试值更好&lt;/p&gt;
&lt;p&gt;一个功能的多个测试
为测试函数命名
Test_&lt;FunctionName&gt;_&lt;Situation&gt;()&lt;/p&gt;
&lt;p&gt;那个测试有什么地方不对
对测试较好地开发方式
你会开始把代码写得容易测试！&lt;/p&gt;
&lt;p&gt;走得太远
. 牺牲真实代码的可读性，只是为了使能测试. 着迷于100%的测试覆盖率. 让测试成为产品开发的阻碍&lt;/p&gt;
&lt;h3&gt;第15章 设计并改进“分钟/小时计数器”&lt;/h3&gt;
&lt;p&gt;问题
跟踪过去一分钟和一个小时里Web服务器传输了多少字节。&lt;/p&gt;
&lt;p&gt;定义类接口
尝试1：一个幼稚的方案
尝试2：传送带设计方案
尝试3：时间桶设计方案
比较三种方案
附录
深入阅读&lt;/p&gt;
&lt;p&gt;关于写高质量代码的书
关于各种编程话题的书
历史上重要的书目&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zoey Young</dc:creator><pubDate>Wed, 02 Oct 2013 00:00:00 +0800</pubDate><guid>tag:zoeyyoung.github.io,2013-10-02:the-art-of-readable-code.html</guid><category>读书</category><category>Book</category></item><item><title>[笔记]《简约至上——交互式设计四策略》</title><link>http://zoeyyoung.github.io/simple-and-usable.html</link><description>&lt;p&gt;书的主题是提出&lt;strong&gt;四&lt;/strong&gt;个令交互式设计成果最大程序简单易用的策略:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合理删除、分层组织、适时隐藏、巧妙转移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全书都是一页文字一页配图，挺多不错的想法&lt;/p&gt;
&lt;p&gt;================&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ch1"&gt;第1章 话说简单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch2"&gt;第2章 明确认识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch3"&gt;第3章 简约四策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch4"&gt;第4章 删除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch5"&gt;第5章 组织&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch6"&gt;第6章 隐藏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch7"&gt;第7章 转移&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ch8"&gt;第8章 最后的叮嘱&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="ch1"&gt;第1章 话说简单&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;关于简单的故事&lt;/strong&gt; P2 为什么安装打印机不能像插电源插座那么简单？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单的威力&lt;/strong&gt; P4 人们喜欢简单、值得信赖、适应性强的产品。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复杂的产品不可持续&lt;/strong&gt; P6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不是那种简单法&lt;/strong&gt; P8 在做技术产品的设计时，至少有3个角度：管理人员、工程师和用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特征&lt;/strong&gt; P10&lt;/p&gt;
&lt;p&gt;简单并不意味着最少化。朴素的设计仍然具有自身的特征和个性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单并不意味着欠缺或低劣，也不意味着不注重装饰或者完全赤裸裸。而是说装饰应该紧密贴近设计本身，任何无关的要素都应该予以剔除。
——Paul Jacques Grillo ( From, Function and Design)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;抛开极简主义，也能够成就简单。&lt;/p&gt;
&lt;p&gt;简单的特征和个性应该源自你使用的方法、所要表现的产品，以及用户执行的任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;貌似简单&lt;/strong&gt; P12 设计一个简短的向导也许能管用，但向导过程越长，体验越差。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;了解你自己&lt;/strong&gt; P14&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ch2"&gt;第2章 明确认识&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;描述要点的两种方式&lt;/strong&gt; P18&lt;/p&gt;
&lt;p&gt;P18 简单而迅速的方式是用一句话把它写出来，包括我要设计什么、要遵循哪几条设计原则，尽量使用最简单的术语。然后，在面对设计功能对照表而犹豫不决时，我就会暂时停下来，问我自己:"做这个表是为了什么?"这个描述是我判断设计是否简单的基准。&lt;/p&gt;
&lt;p&gt;更好而花费时间更长的方式是描述我希望用户拥有什么体验。&lt;/p&gt;
&lt;p&gt;每个设计都是在考虑诸多限制之后给出的方案。最好是在设计之初就搞清楚都存在哪些限制。然后才能保证自己的设计能够与用户的需求紧密贴合。&lt;/p&gt;
&lt;p&gt;P19 先理解用户，再思考合适的设计。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;走出办公室&lt;/strong&gt; P20&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;观察什么&lt;/strong&gt; P22 在家里、在公司、在户外，你的设计必须能够适应各种干扰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三种用户&lt;/strong&gt; P24&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;专家型用户愿意探索你的产品或服务，并且会给你提出各种改进建议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随意型用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主流用户 口头禅："我的手机只要能打电话、能发短信就行了。"&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么应该忽略专家型用户&lt;/strong&gt;  P26 专家想要的功能往往会吓倒主流用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为主流用户而设计&lt;/strong&gt; P28 如果为专家设计相当于为机械师造小洗车，那么为中级用户设计就相当于给那些喜欢自己动手修理引擎的人设计汽车。典型的用户应该是主流用户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主流用户想要什么&lt;/strong&gt; P30&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感情需求&lt;/strong&gt; P32&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单意味着控制&lt;/strong&gt; P34 简单就是感觉在掌控一切。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，用户希望感觉是在掌控自己使用的技术。&lt;strong&gt;“掌控”的含义：掌握结果&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次，用户希望感觉是在掌控自己的生活。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;正确选择“什么”&lt;/strong&gt; P36 下一个问题是：“用户在做什么？”&lt;/p&gt;
&lt;p&gt;关键是不能遗漏用户体验过程中的任何一个步骤。&lt;/p&gt;
&lt;p&gt;关注主要的行动，并且要从用户的视角把它描述出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述用户体验&lt;/strong&gt; P38 故事是描述认识的一个好方式。&lt;/p&gt;
&lt;p&gt;有必要多花点儿时间把故事的每一个细节都想清楚。如果你想让自己的设计简单，每一个细节都至关重要。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲故事&lt;/strong&gt; P40 好的用户故事应该简明、具体、可信，并且拥有相关细节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境、角色、情节&lt;/strong&gt; P42 三个层次&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可信的环境（故事中的“时间”和“地点”）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可信的角色（“谁”和“为什么”）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流畅的情节（“什么”和“怎么样”）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把你的设计放在一个情节中，情节中有可信的角色，发生在可信的环境中。用荷兰著名建筑大师埃利尔-沙里宁（Eliel Saarinen）的话说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“在设计一件东西的时候，一定要考虑到比之件东西更大的环境——椅子在房间里，房间在住宅里，住宅在土地上，土地在城市建设规划中。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;极端的可用性&lt;/strong&gt; P44 设计简单的体验意味着要追求极端的目标&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简便的方式&lt;/strong&gt; P46 尽可能用最简单的词汇描述你的想法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;洞察力&lt;/strong&gt; P48 花点儿时间观察和研究你的故事背后的数据。&lt;/p&gt;
&lt;p&gt;评估你的故事并追问：什么因素对用户的行为影响最大？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;明确认识&lt;/strong&gt; P50 不要匆忙着手设计。理解核心问题需要时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分享&lt;/strong&gt; P52&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ch3"&gt;第3章 简约四策略&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;简化遥控器&lt;/strong&gt; P56&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遥控器&lt;/strong&gt; P58&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四个策略&lt;/strong&gt; P60&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四个策略&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;——去掉所有不必要的按钮，直至减到不能再减&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;组织&lt;/strong&gt;——按照有意义的标准将按钮划分成组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隐藏&lt;/strong&gt;——把那些不是最重要的按钮安排在活动仓盖之下，避免分散用户注意力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;转移&lt;/strong&gt;——只在遥控器上保留具备最基本功能的按钮，将其他控制转移到电视屏幕上的菜单里，从而将复杂性从遥控器转移到电视&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id="ch4"&gt;第4章 删除&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt; P64 删除或省略功能可以创造出成功的产品。&lt;/p&gt;
&lt;p&gt;例如：Tumblr Elise iPhone Basecamp&lt;/p&gt;
&lt;p&gt;更注重功能的深度，而不是广度。它们广受好评是因为它们做的事情虽少，但却比竞争产品做得更好。&lt;/p&gt;
&lt;p&gt;简化设计最明显的方式就是删除不必要的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免错删&lt;/strong&gt; P66&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关注核心&lt;/strong&gt; P68 与新增功能相比，客户更关注基本功能的改进。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;砍掉残缺功能&lt;/strong&gt; P70 “沉没成本误区”&lt;/p&gt;
&lt;p&gt;问题绝非“为什么应该去掉它”，而是“为什么要留着它”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;假如用户……&lt;/strong&gt; P72&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但我们的用户想要&lt;/strong&gt; P74 要倾听客户的意见，但决不能盲从。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方案，不是流程&lt;/strong&gt; P76&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果功能不是必要的&lt;/strong&gt; P78&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真有影响吗&lt;/strong&gt; P80&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;排定功能优先级&lt;/strong&gt; P82&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;负担&lt;/strong&gt; P84&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;决策&lt;/strong&gt; P86 选择有限，用户反而更欢喜。&lt;em&gt;——深有体会 zoey&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分心&lt;/strong&gt; P88&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聪明的默认值&lt;/strong&gt; P90 默认值是节省用户时间和精力的有效方式，也是清除设计蓝图中“减速带”的首选方式。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;中关村网站中比较产品的，预先放上搜索的和相近的产品的话应该有用&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选项和首选项&lt;/strong&gt; P92&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果一个选项还嫌多&lt;/strong&gt; P94&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误&lt;/strong&gt; P96&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;视觉混乱&lt;/strong&gt; P98&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删减文字&lt;/strong&gt; P100 &lt;em&gt;最讨厌看一堆没用的字了 zoey&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;删除文字下列三大好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重要的内容“水落石出”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消除了分析满屏内容的麻烦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读者会对自己看到了什么更有自信&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;删除哪些文字？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;删除引见性文字，开门见山&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除不必要的说明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除烦琐的解释，使用描述性链接&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“把每一页中的文字删掉一半，然后把剩下的再删掉一半。”——史蒂夫-克鲁格《点石成金》中第三条可用性法则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;精简句子&lt;/strong&gt; P102&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删减过多&lt;/strong&gt; P104&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你能做到&lt;/strong&gt; P106&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;焦点&lt;/strong&gt; P108&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ch5"&gt;第5章 组织&lt;/h2&gt;

&lt;p&gt;组织　　112&lt;/p&gt;
&lt;p&gt;分块　　114&lt;/p&gt;
&lt;p&gt;围绕行为组织　　116&lt;/p&gt;
&lt;p&gt;是非分明　　118&lt;/p&gt;
&lt;p&gt;字母表与格式　　120&lt;/p&gt;
&lt;p&gt;搜索　　122&lt;/p&gt;
&lt;p&gt;时间和空间　　124&lt;/p&gt;
&lt;p&gt;网格　　126&lt;/p&gt;
&lt;p&gt;大小和位置　　128&lt;/p&gt;
&lt;p&gt;分层　　130&lt;/p&gt;
&lt;p&gt;色标　　132&lt;/p&gt;
&lt;p&gt;期望路径　　134&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ch6"&gt;第6章 隐藏&lt;/h2&gt;

&lt;p&gt;隐藏　　138&lt;/p&gt;
&lt;p&gt;不常用但不能少　　140&lt;/p&gt;
&lt;p&gt;自定义　　142&lt;/p&gt;
&lt;p&gt;自动定制　　144&lt;/p&gt;
&lt;p&gt;渐进展示　　146&lt;/p&gt;
&lt;p&gt;阶段展示　　148&lt;/p&gt;
&lt;p&gt;适时出现　　150&lt;/p&gt;
&lt;p&gt;提示与线索　　152&lt;/p&gt;
&lt;p&gt;让功能容易找到　　154&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隐藏的要求&lt;/strong&gt; P156&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ch7"&gt;第7章 转移&lt;/h2&gt;

&lt;p&gt;转移　　160&lt;/p&gt;
&lt;p&gt;在设备之间转移　　162&lt;/p&gt;
&lt;p&gt;移动平台与桌面平台　　164&lt;/p&gt;
&lt;p&gt;向用户转移　　166&lt;/p&gt;
&lt;p&gt;用户最擅长做什么　　168&lt;/p&gt;
&lt;p&gt;创造开放式体验　　170&lt;/p&gt;
&lt;p&gt;菜刀与钢琴　　172&lt;/p&gt;
&lt;p&gt;非结构化数据　　174&lt;/p&gt;
&lt;p&gt;信任　　176&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="ch8"&gt;第8章 最后的叮嘱&lt;/h2&gt;

&lt;p&gt;顽固的复杂性　　180&lt;/p&gt;
&lt;p&gt;细节　　182&lt;/p&gt;
&lt;p&gt;简单发生在用户的头脑中　　184&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zoey Young</dc:creator><pubDate>Sun, 24 Jun 2012 00:00:00 +0800</pubDate><guid>tag:zoeyyoung.github.io,2012-06-24:simple-and-usable.html</guid><category>读书</category><category>Book</category></item><item><title>[笔记]《Rework》</title><link>http://zoeyyoung.github.io/rework.html</link><description>&lt;p&gt;2012-06-20 很不错的书，看完了&lt;strong&gt;中文版&lt;/strong&gt;，有点想读英文原版，不过暂时先搁浅一下，会回来的&lt;/p&gt;
&lt;h3&gt;轻装上阵&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要被教条所束缚&lt;/li&gt;
&lt;li&gt;失败并非成功之母，不要“崇拜”失败，从成功中你可以学到更多&lt;/li&gt;
&lt;li&gt;计划等同于猜测，未来有太多你不能够控制的因素，长远的计划没有任何意义&lt;/li&gt;
&lt;li&gt;企业不应盲目扩张，规模不是衡量企业成功与否的因素，小企业有大企业所没有的优势:灵敏&lt;/li&gt;
&lt;li&gt;不要成为工作狂，你需要时间思考更重要的东西&lt;/li&gt;
&lt;li&gt;“创业家”(entrepreneur)这个词应该被替换成“起步者”(startup)，每个人都可以开创自己的事业&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;出发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;做一些能够引起轰动的事，最关键的是能够真正帮助别人解决一些问题，而不是去山寨别人的产品&lt;/li&gt;
&lt;li&gt;抓住自己的需求，设计能够解决自己所遇到的问题的产品&lt;/li&gt;
&lt;li&gt;立即开始去行动，你的计划和想法并不代表你做了什么&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;前进&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一段时间只做一件事，做最重要的事，把全部精力投入到一个产品上去&lt;/li&gt;
&lt;li&gt;“少”是一件好事，限制更是一种优势&lt;/li&gt;
&lt;li&gt;从最核心的地方开始，细枝末节的部分以后慢慢修改&lt;/li&gt;
&lt;li&gt;开始的时候不要太关注细节，它只会浪费你的时间&lt;/li&gt;
&lt;li&gt;不断做决定的过程就是不断前进的过程，不要优柔寡断&lt;/li&gt;
&lt;li&gt;抓住最核心的东西，抛弃那些不重要的东西，真正重要的东西迟早会引起你的注意&lt;/li&gt;
&lt;li&gt;少即是多，不做最多的，而做最对的&lt;/li&gt;
&lt;li&gt;专注于那些不会改变的东西，而不是那些时髦的新事物&lt;/li&gt;
&lt;li&gt;问题的关键是争取顾客并赚钱，而不是你使用什么工具。一跟贵的高尔夫球杆不能保证你打球出色&lt;/li&gt;
&lt;li&gt;买出你的“副产品”，做任何事总会给你带来“副产品”，他们可能同样具有价值&lt;/li&gt;
&lt;li&gt;不要总被细枝末节所羁绊，不要等到尽善尽美才发布，尽快发布产品，并且发布后不断改进&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;效率&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;现实一点吧，用最直观的方式描述事物，放弃那些没有任何意义的文档和图表&lt;/li&gt;
&lt;li&gt;不要只顾低头干事，还要抬起头来问问自己究竟为什么要这样做，这件事真的有意义吗&lt;/li&gt;
&lt;li&gt;中断是高效的天敌，拿出一块完整的连续的时间做一件事，这样的效率最高&lt;/li&gt;
&lt;li&gt;开会就像毒药&lt;/li&gt;
&lt;li&gt;足够好就可以了，不必苛求完美，不必最求繁杂，那只会满足你的虚荣心&lt;/li&gt;
&lt;li&gt;速度第一，尽快实现一个一个小的目标，这会激励你实现最终的大目标&lt;/li&gt;
&lt;li&gt;放弃不等于失败，该放弃时就放弃，逞能只会让你失去的更多&lt;/li&gt;
&lt;li&gt;注意休息，缺乏睡眠会让你失去创造力，士气低落，并且变得暴躁易怒&lt;/li&gt;
&lt;li&gt;把大计划分成小计划，把大块时间切割成小块时间，这会帮助你更好的做出计划和选择&lt;/li&gt;
&lt;li&gt;任务清单要小，每次只关心一件事&lt;/li&gt;
&lt;li&gt;不断做出小的决定，并且不断根据时机而改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;对手&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不要抄袭，通过抄袭你无法理解事物的本质，而且你一直处于被动的地位&lt;/li&gt;
&lt;li&gt;把你自身融入到产品中去，变成产品的一部分，这是对手所抄袭不来的&lt;/li&gt;
&lt;li&gt;找出对立的对手，让自己变得鲜明，同时也利于产品的营销&lt;/li&gt;
&lt;li&gt;不要通过冷战的方式与对手较量，你需要的不是比对手做的更多，而是更少更精&lt;/li&gt;
&lt;li&gt;把精力集中于自己，而不是竞争对手&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;进化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;学会说不，不能被顾客牵着鼻子走，要有自己的原则&lt;/li&gt;
&lt;li&gt;不要专门为一两个大客户而改变产品，你需要专注于一类用户，而不是一两个&lt;/li&gt;
&lt;li&gt;想到好的想法不要头脑发热，先把它写下来，日后仔细考虑，互相比较，再决定实现哪一个&lt;/li&gt;
&lt;li&gt;做那种让用户越用越喜欢的东西，而不是买完就后悔的东西，这样他会向他的朋友推荐你的产品，这是最好的广告&lt;/li&gt;
&lt;li&gt;没有必要把用户反馈都记录下来，真正重要的建议你会多次接触，自然能记住&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;晋级&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;开始的时候默默无闻是一件好事，它给你犯错误的空间&lt;/li&gt;
&lt;li&gt;培养你自己的听众，让他们主动了解你，博客是一个很不错的方式&lt;/li&gt;
&lt;li&gt;“教育”用户，让他们对你“忠诚”，他们会尊敬你，apple是个好例子&lt;/li&gt;
&lt;li&gt;学会分享，分享不会使你被别人超越，人们会喜欢你，你将从中收益&lt;/li&gt;
&lt;li&gt;向用户展示产品背后的故事，这会拉近你与用户的关系&lt;/li&gt;
&lt;li&gt;做真实的自己，正视自己的不足，残缺也是一种美&lt;/li&gt;
&lt;li&gt;不要向记者们群发新闻稿，约他们出来，富有激情的向他们推销，这样你会获得最好的报道&lt;/li&gt;
&lt;li&gt;不要指望通过那些大型媒体营销自己，相反那些草根博主也许可以帮助你&lt;/li&gt;
&lt;li&gt;开始时免费给用户提供一些服务，如果他们喜欢，他们会花钱使用你更完善的服务&lt;/li&gt;
&lt;li&gt;没有必要专门设置“销售部”，你发的每封邮件，回的每个电话都是在marketing&lt;/li&gt;
&lt;li&gt;一夜成名的背后必然是数年的心血和默默的付出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;招聘&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;招聘之前自己先体验一下这个岗位，这不仅有助于找到合适的人，还会帮助你日后更好的管理&lt;/li&gt;
&lt;li&gt;在真正需要时才招聘，而不是仅仅为了扩大规模&lt;/li&gt;
&lt;li&gt;不要因为对方很优秀就把他招进来，招最合适的，而不是最好的&lt;/li&gt;
&lt;li&gt;不要不停大量招新人，这会使每一位员工身边都有大量陌生人，这对于公司发展很不利&lt;/li&gt;
&lt;li&gt;同一份简历同时发给很多公司的人不要招。如何辨别这样的人：看信中他是在与你沟通，还是在堆砌要点&lt;/li&gt;
&lt;li&gt;5年工作经验与半年工作经验没有太大区别，你很难辨别其间的区别&lt;/li&gt;
&lt;li&gt;GPA并不重要，除非你需要一个教授，但事实上你不需要&lt;/li&gt;
&lt;li&gt;对于小团队，每个成员都必须实实在在地做事，你不需要只会指手画脚的人&lt;/li&gt;
&lt;li&gt;你需要一个能够从小事做起，并且总揽大局的管理者&lt;/li&gt;
&lt;li&gt;聘用有更好写作能力的人，他们有更清晰的思维，更好的表达能力&lt;/li&gt;
&lt;li&gt;合适的人选在世界各地，没必要在乎地理位置，是否在同一个城市对于一个团队并不重要&lt;/li&gt;
&lt;li&gt;可以给应聘者一个小项目做，这是检验他能否胜任的最好方式&lt;/li&gt;
&lt;li&gt;应对问题&lt;/li&gt;
&lt;li&gt;当负面新闻出现时，坦诚地向消费者解释，而不是试图掩盖它&lt;/li&gt;
&lt;li&gt;迅速解决客户遇到的问题，对方不但不会抱怨，反而会更加信任你&lt;/li&gt;
&lt;li&gt;对于道歉要学会换位思考：如果你是被道歉者，你想听到怎样的道歉？最重要的是真诚&lt;/li&gt;
&lt;li&gt;让每一个员工都能接触到客户，对于任何岗位这都有好处&lt;/li&gt;
&lt;li&gt;发布新版本后深吸一口气吧，抵制改变是人的天性。不要消极应对客户的抱怨，而是要耐心的向他们解释&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;企业文化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;企业文化不是你能够创造的，它是在长时间内一点点形成的&lt;/li&gt;
&lt;li&gt;决定都是暂时的，要随着形势的不断变化而不断改变决定&lt;/li&gt;
&lt;li&gt;企业的文化必须尊重每一个人的工作&lt;/li&gt;
&lt;li&gt;不要像对待孩子一样对待员工，你应该信任他们，给予他们足够的空间&lt;/li&gt;
&lt;li&gt;不要强行加班，这会降低员工白天的工作效率，最终不会给企业带来任何好处&lt;/li&gt;
&lt;li&gt;不要往别人的伤口上撒盐，也不要惩罚那些偶然出现的问题，你应该关注那些经常出现的问题&lt;/li&gt;
&lt;li&gt;不要装腔作势，那其实是一种自卑的表现&lt;/li&gt;
&lt;li&gt;不要出现need, must, can't, easy, just, only, fast这几个单词&lt;/li&gt;
&lt;li&gt;只将真正紧急的事情贴上紧急标签&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;结语&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当灵感出现时，立即抓住它，不要拖延。你可以有很多idea，但如果不实践，他们都等于零&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/meng-meng/archive/2011/11/15/2249852.html"&gt;每一个有理想的程序员都应该读的一本书-《rework》&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zoey Young</dc:creator><pubDate>Thu, 21 Jun 2012 00:00:00 +0800</pubDate><guid>tag:zoeyyoung.github.io,2012-06-21:rework.html</guid><category>读书</category><category>Book</category></item><item><title>[笔记]《黑客与画家》</title><link>http://zoeyyoung.github.io/hakers-and-painters.html</link><description>&lt;p&gt;最近在看的书, 摘录一些有趣的言论&lt;/p&gt;
&lt;p&gt;文章似乎写得比较早了, 有些人似乎拿现在的观念去批驳书中的某些观点&lt;/p&gt;
&lt;p&gt;但是正如书中经常提到的, 随大流的问题～～所以有自己的观点应该没有错&lt;/p&gt;
&lt;p&gt;不过我比较不喜欢在不是很了解一个东西的时候就发表评论&lt;/p&gt;
&lt;p&gt;正如Emacs, 刚开始用时觉得超级难用, 用一段时间觉得为什么平时用的一些编辑器没有这么多方便的快捷键呢&lt;/p&gt;
&lt;p&gt;所以不管怎样, 要永于尝试, 不应太过顽固&lt;/p&gt;
&lt;p&gt;就像我并没有认真学过C++, 只大概看了看, 但感觉它很难用（只是主观感觉）, 当然我没有到处评论说它难用, 事实上很多公司都招C++程序员, 我有时也会想学一学&lt;/p&gt;
&lt;p&gt;不管怎样, 有人说它好用, 应该就有它好用的地方, 又或许是因为那些人没学过更好用的语言&lt;/p&gt;
&lt;p&gt;我还想学Lisp, 目的比较单纯, 因为Emacs的插件是用它写的, 我也想自己创造工具, 或者至少能看懂别人写的, 改造成适合自己的&lt;/p&gt;
&lt;p&gt;想学的很多呢～～最新的TODO～～就是看完之本书. 看书慢的娃 伤不起.&lt;/p&gt;
&lt;h2&gt;硅谷创业之父Paul Graham文集&lt;/h2&gt;
&lt;h2&gt;Hackers and Painters Big Ideas from the Computer Age&lt;/h2&gt;
&lt;p&gt;"运营创业公司, 每天都像在战斗；而为大公司工作, 就像在窒息中挣扎. "&lt;/p&gt;
&lt;p&gt;"我们生活中的一切, 都正在成为计算机. 所以, 如果你想理解我们目前的世界以及它的未来动向, 那么多了解一些黑客的想法会对你有帮助. "&lt;/p&gt;
&lt;p&gt;Paul Graham有一套完整的创业哲学, 他的创业公式是：&lt;/p&gt;
&lt;p&gt;1.搭建原型
 2.上线运营（别管bug）
 3.收集反馈
 4.调整产品
 5.成长壮大&lt;/p&gt;
&lt;h2&gt;13 书呆子的复仇&lt;/h2&gt;
&lt;p&gt;P180 软件业有一场永不停息的战斗, 书生气的开发者与官僚主义的经理之间总是发生冲突.&lt;/p&gt;
&lt;p&gt;P180 那些经理奇迹般地同时具备了两种很常见但很难结合在一起的特点：(a)对技术一无所知；(b)对技术有强烈的个人观点.&lt;/p&gt;
&lt;p&gt;P180 你的经理相信所有编程语言的功能都差不多, 可以互相替代. （这是错误的假设）&lt;/p&gt;
&lt;p&gt;P181 如果语言各有不同, 你的经理就会突然发现, 有两个互相关联的方程,
他必须找到一个能够同时满足两个方程的最佳解, 而最要命的却是他对此根本一无所知.
第一个方程是找到（相对于要解决的问题）能够适用20年左右的最佳语言,
第二个方程是（为这种语言）找到合适的程序员、函数库的机会有多大.&lt;/p&gt;
&lt;p&gt;P182 编程语言现在的发展不过刚刚赶上1958年Lisp语言的水平.&lt;/p&gt;
&lt;h3&gt;朝着数学的方法发展&lt;/h3&gt;
&lt;p&gt;P185 这种语言本质上不是一种技术, 而是数学. 数学是不会过时的. （与快排进行类比, 而不是硬件）&lt;/p&gt;
&lt;h3&gt;为什么Lisp语言很特别&lt;/h3&gt;
&lt;p&gt;9种思想：&lt;/p&gt;
&lt;p&gt;1.条件结构（即if-then-else结构）&lt;/p&gt;
&lt;p&gt;2.函数也是一种数据类型&lt;/p&gt;
&lt;p&gt;3.递归：Lisp是第一种支持递归函数的高级语言&lt;/p&gt;
&lt;p&gt;4.变量的动态类型：所有变量实际上都是指针&lt;/p&gt;
&lt;p&gt;5.垃圾回收机制&lt;/p&gt;
&lt;p&gt;6.程序由表达式组成&lt;/p&gt;
&lt;p&gt;7.符号类型：实际上是一种指针, 指向存储在散列表中的字符串&lt;/p&gt;
&lt;p&gt;8.代码使用符号和常量组成的树形表示法&lt;/p&gt;
&lt;p&gt;9.无论什么时候, 整个语言都是可用的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lisp并不真正区分读取期、编译期和运行期.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以在读取期编译或运行代码, 也可以在编译期读取或运行代码, 还可以在运行期读取或者编译代码.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在读取期运行代码, 使得用户可以重新调整(reprogram)Lisp的语法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在编译期运行代码, 则是Lisp宏的工作基础；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在运行期编译代码, 使得Lisp可以在Emacs这样的程序中充当扩展语言(extension language)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在运行期读取代码, 使得程序之间可以用S表达式(S-expression)通信, 近来XML格式的出现使得之个概念被重新“发明”出来了.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;这节后面关于Lisp的部分因为没学过Lisp, 还不大理解, 再看吧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看评论：http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html&lt;/p&gt;
&lt;p&gt;对Lisp真是褒贬不一～～学学就知道了. 看来我落伍很多了啊～～&lt;/p&gt;
&lt;h3&gt;一个诀窍&lt;/h3&gt;
&lt;p&gt;P193 如果你想在软件业获得成功, 就使用你知道的最强大的语言, 用它解决你知道的最难的问题, 并且等待竞争对手的经理做出自甘平庸的选择.&lt;/p&gt;
&lt;h3&gt;附录：编程能力&lt;/h3&gt;
&lt;p&gt;这篇的例子没怎么能理解, 题目就很不理解. 额. . 再看.&lt;/p&gt;
&lt;p&gt;"格林斯潘第十定律"(Greenspun's Tenth Rule)：
任何C或Fortran程序复杂到一定程序之后, 都会包含一个临时开发的、只有一半功能的、不完全符合规格的、到处都是bug的、运行速度很慢的Common Lisp实现.&lt;/p&gt;
&lt;h2&gt;14 梦寐以求的编程语言&lt;/h2&gt;
&lt;p&gt;P200 外部因素：一种语言必须是某一个流行的计算机系统的脚本语言(scripting language),才会变得流行.&lt;/p&gt;
&lt;p&gt;P210 为了写出优秀软件, 你必须同时具备两种互相冲突的信念.
一方面, 你要像初生牛犊一样, 对自己的能力信心万丈；另一方面, 你又要像历经沧桑的老人一样, 对自己的能力抱着怀疑态度.&lt;/p&gt;
&lt;p&gt;这里的难点在于你要意识到, 实际上之两种信念并不矛盾. 你的乐观主义和怀疑倾向分别针对两个不同的对象.
你必须对解决难题的可能性保持乐观, 同时对当前解法的合理性保持怀疑.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zoey Young</dc:creator><pubDate>Wed, 13 Jun 2012 00:00:00 +0800</pubDate><guid>tag:zoeyyoung.github.io,2012-06-13:hakers-and-painters.html</guid><category>读书</category><category>Book</category></item></channel></rss>